name: EU Migration WebAPI CI/CD Pipeline

on:
  push:
    branches:
      - dev

jobs:
  install_dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install SQLCipher
        run: |
          sudo apt-get update && sudo apt-get install -y \
            gcc \
            make \
            libssl-dev \
            libffi-dev \
            python3-dev \
            sqlcipher \
            libsqlcipher-dev \
            build-essential \
          && sudo rm -rf /var/lib/apt/lists/*
        
      - name: Install Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Upload Virtual Environment
        uses: actions/upload-artifact@v4
        with:
          name: venv
          path: venv/

  run_tests:
    runs-on: ubuntu-latest
    needs: install_dependencies
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Reinstall SQLCipher
        run: |
          sudo apt-get update && sudo apt-get install -y \
            sqlcipher \
            libsqlcipher-dev 

      - name: Download Virtual Environment
        uses: actions/download-artifact@v4
        with:
          name: venv
          path: venv/

      - name: Fix Permissions
        run: chmod -R +x venv/bin

      - name: Run Tests
        run: |
          source venv/bin/activate
          pytest tests/
  
  clean_up:
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Clean up __pycache__ files
        run: |
          find . -type d -name '__pycache__' -exec rm -rf {} +
          git clean -fd

  merge_into_main:
    runs-on: ubuntu-latest
    needs: clean_up
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Merge dev into main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git fetch origin
          git checkout main
          git merge -X theirs origin/dev --allow-unrelated-histories
          git push origin main

  create_release:
      runs-on: ubuntu-latest
      needs: merge_into_main
      permissions:
        contents: write
  
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
          with:
            ref: main
            fetch-depth: 0  
  
        - name: Fetch all tags
          run: git fetch --tags --force
  
        - name: Get latest tag
          id: get_latest_tag
          run: |
            LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
            if [[ -z "$LATEST_TAG" ]]; then
              LATEST_TAG="v0.0.0"
            fi
            echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
            echo "Latest tag found: $LATEST_TAG"
  
        - name: Determine version bump
          id: version_bump
          run: |
            LATEST_TAG=${{ env.LATEST_TAG }}
            echo "Latest tag: $LATEST_TAG"
  
            MAJOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\..*/\1/')
            MINOR=$(echo $LATEST_TAG | sed -E 's/v[0-9]+\.([0-9]+).*/\1/')
            PATCH=$(echo $LATEST_TAG | sed -E 's/v[0-9]+\.[0-9]+\.([0-9]+)/\1/')
  
            COMMITS=$(git log -1 --pretty=%B)
            echo "Commit message: $COMMITS"
  
            if echo "$COMMITS" | grep -qE "^major:"; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif echo "$COMMITS" | grep -qE "^feat:"; then
              MINOR=$((MINOR + 1))
              PATCH=0
            elif echo "$COMMITS" | grep -qE "^fix:"; then
              PATCH=$((PATCH + 1))
            else
              echo "No version bump required. Skipping release."
              exit 0
            fi
  
            NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
            echo "New version: $NEW_VERSION"
  
        - name: Check if tag already exists
          id: check_tag
          run: |
            if git rev-parse "refs/tags/${{ env.NEW_VERSION }}" >/dev/null 2>&1; then
              echo "Tag already exists. Skipping tag creation."
              echo "TAG_EXISTS=true" >> $GITHUB_ENV
            else
              echo "TAG_EXISTS=false" >> $GITHUB_ENV
            fi
  
        - name: Create new tag
          if: env.TAG_EXISTS == 'false'
          run: |
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"
            git tag ${{ env.NEW_VERSION }}
            git push origin ${{ env.NEW_VERSION }}
  
        - name: Create GitHub Release
          uses: softprops/action-gh-release@v2
          if: env.TAG_EXISTS == 'false'
          with:
            tag_name: ${{ env.NEW_VERSION }}
            name: Release ${{ env.NEW_VERSION }}
            body: "Automated release for ${{ env.NEW_VERSION }}"
            draft: false
            prerelease: false
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        

