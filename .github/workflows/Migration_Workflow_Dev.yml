name: EU Migration Web API CI/CD Pipeline

on:
  push:
    branches:
      - dev

jobs:
  install_dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install SQLCipher
        run: |
          sudo apt-get update && sudo apt-get install -y \
            gcc \
            make \
            libssl-dev \
            libffi-dev \
            python3-dev \
            sqlcipher \
            libsqlcipher-dev \
            build-essential \
          && sudo rm -rf /var/lib/apt/lists/*
        
      - name: Install Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Fix Permissions
        run: chmod -R +x venv/bin

      - name: Upload Virtual Environment
        uses: actions/upload-artifact@v4
        with:
          name: venv
          path: venv/

  run_tests:
    runs-on: ubuntu-latest
    needs: install_dependencies
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Download Virtual Environment
        uses: actions/download-artifact@v4
        with:
          name: venv
          path: venv/

      - name: Run Tests
        run: |
          source venv/bin/activate
          pytest tests/
  
  clean_up:
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Clean up __pycache__ files
        run: |
          find . -type d -name '__pycache__' -exec rm -rf {} +

  merge_into_main:
    runs-on: ubuntu-latest
    needs: clean_up
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Merge dev into main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git fetch origin
          git checkout main
          git merge -X theirs origin/dev --allow-unrelated-histories
          git push origin main

  create_release:
    runs-on: ubuntu-latest
    needs: merge_into_main
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: latest-tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Get commit message
        id: commit
        run: |
          message=$(git log --oneline -n 1 origin/dev | cut -d' ' -f2-)
          echo "message=$message" >> $GITHUB_OUTPUT  

      - name: Calculate new version
        id: version
        run: |
          current_version="${{ steps.latest-tag.outputs.tag }}"
          commit_message="${{ steps.commit.outputs.message }}"

          current_version=${current_version#v}

          if [[ -z "$current_version" ]]; then
            new_version="v0.0.1"
          else
            IFS='.' read -r major minor patch <<< "$current_version"

            [ -z "$major" ] && major=0
            [ -z "$minor" ] && minor=0
            [ -z "$patch" ] && patch=0

            if [[ "$commit_message" =~ "major:" ]]; then
              major=$((major + 1))
              minor=0
              patch=0
            elif [[ "$commit_message" =~ "feat:" ]]; then
              minor=$((minor + 1))
              patch=0
            elif [[ "$commit_message" =~ "fix:" ]]; then
              patch=$((patch + 1))
            else
              echo "No version bump required"
              exit 0
            fi

            new_version="v${major}.${minor}.${patch}"
          fi

          echo "new_version=$new_version" >> $GITHUB_OUTPUT  

      - name: Create Tag
        if: steps.version.outputs.new_version != ''
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git tag ${{ steps.version.outputs.new_version }}
          git push origin ${{ steps.version.outputs.new_version }}

      - name: Create GitHub Release
        if: steps.version.outputs.new_version != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: Release ${{ steps.version.outputs.new_version }}
          body: |
            - ${{ steps.commit.outputs.message }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
