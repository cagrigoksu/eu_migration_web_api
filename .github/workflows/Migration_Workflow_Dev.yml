name: EU Migration WebAPI CI/CD Pipeline

on:
  push:
    branches:
      - dev

jobs:
  install_dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install SQLCipher
        run: |
          sudo apt-get update && sudo apt-get install -y \
            gcc \
            make \
            libssl-dev \
            libffi-dev \
            python3-dev \
            sqlcipher \
            libsqlcipher-dev \
            build-essential \
          && sudo rm -rf /var/lib/apt/lists/*
        
      - name: Install Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Upload Virtual Environment
        uses: actions/upload-artifact@v4
        with:
          name: venv
          path: venv/

  run_tests:
    runs-on: ubuntu-latest
    needs: install_dependencies
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Reinstall SQLCipher
        run: |
          sudo apt-get update && sudo apt-get install -y \
            sqlcipher \
            libsqlcipher-dev 

      - name: Download Virtual Environment
        uses: actions/download-artifact@v4
        with:
          name: venv
          path: venv/

      - name: Fix Permissions
        run: chmod -R +x venv/bin

      - name: Run Tests
        run: |
          source venv/bin/activate
          pytest tests/
  
  clean_up:
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Clean up __pycache__ files
        run: |
          find . -type d -name '__pycache__' -exec rm -rf {} +
          git clean -fd

  merge_into_main:
    runs-on: ubuntu-latest
    needs: clean_up
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Merge dev into main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git fetch origin
          git checkout main
          git merge -X theirs origin/dev --allow-unrelated-histories
          git push origin main

  create_release:
    runs-on: ubuntu-latest
    needs: merge_into_main
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: echo "TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo 'v0.0.0')" >> $GITHUB_ENV

      - name: Determine next version
        id: version
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          VERSION=${TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          if [[ "$COMMIT_MSG" == *"major:"* ]]; then
            ((MAJOR++)); MINOR=0; PATCH=0
          elif [[ "$COMMIT_MSG" == *"feat:"* ]]; then
            ((MINOR++)); PATCH=0
          elif [[ "$COMMIT_MSG" == *"fix:"* ]]; then
            ((PATCH++))
          else
            echo "No version bump keyword found. Skipping release."
            exit 0
          fi

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create new tag
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: Release ${{ env.NEW_VERSION }}
          body: "Automated release of ${{ env.NEW_VERSION }}"
          draft: false
          prerelease: false